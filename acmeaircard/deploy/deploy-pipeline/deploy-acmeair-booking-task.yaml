apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-acmeair-booking
  namespace: acmeaircard
spec:
  params:
    - name: imageLocation
      type: string
    - name: applicationHost
      type: string
  steps:
    - image: >-
        intreg0.fpet.pokprv.stglabs.ibm.com:5000/openshift/cli:latest
      name: create-booking-deployment
      resources: {}
      script: |
        #!/bin/bash

        cat <<EOF | oc apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: acmeair-bookingservice
          spec:
            replicas: 1
            selector:
              matchLabels:
                name: acmeair-booking-deployment
            template:
              metadata:
                labels:
                  name: acmeair-booking-deployment
                  app: acmeair-3
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "9080"
              spec:
                containers:
                - name: acmeair-bookingservice-java
                  image: $(params.imageLocation)/$(context.taskRun.namespace)/acmeair-bookingservice-java:latest
                  ports:
                    - containerPort: 9080
                    - containerPort: 9443
                  imagePullPolicy: Always
                  env:
                  - name: USERNAME
                    value: admin
                  - name: PASSWORD
                    value: password
                  - name: MONGO_PORT
                    value: "27017"
                  - name: MONGO_HOST
                    value: acmeair-booking-db
                  - name: JVM_ARGS
                    value: "-DcustomerClient/mp-rest/url=http://acmeair-customer-service:9080/customer -DflightClient/mp-rest/url=http://acmeair-flight-service:9080/flight -Dmp.jwt.verify.publickey.location=http://acmeair-auth-service:9080/auth/getJwk"
                  - name: TRACK_REWARD_MILES
                    value: 'true'
                  - name: SECURE_SERVICE_CALLS
                    value: 'true'
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 9080
                    initialDelaySeconds: 20
                    periodSeconds: 5
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 9080
                    initialDelaySeconds: 120
                    periodSeconds: 15
        EOF
    - image: 'intreg0.fpet.pokprv.stglabs.ibm.com:5000/openshift/cli:latest'
      name: create-booking-service
      resources: {}
      script: |
        #!/bin/bash

        cat <<EOF | oc apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: acmeair-booking-service
          spec:
            ports:
              - port: 9080
            selector:
              name: acmeair-booking-deployment
        EOF
    - image: 'intreg0.fpet.pokprv.stglabs.ibm.com:5000/openshift/cli:latest'
      name: create-booking-db-service
      resources: {}
      script: |
        #!/bin/bash

        cat <<EOF | oc apply -f -
          ##### Booking Database  #####
          apiVersion: v1
          kind: Service
          metadata:
            creationTimestamp: null
            labels:
              service: acmeair-booking-db
            name: acmeair-booking-db
          spec:
            ports:
            - name: "27017"
              port: 27017
              protocol: TCP
              targetPort: 27017
            selector:
              name: acmeair-booking-db
          status:
            loadBalancer: {}
        EOF
    - image: 'intreg0.fpet.pokprv.stglabs.ibm.com:5000/openshift/cli:latest'
      name: create-booking-db
      resources: {}
      script: |
        #!/bin/bash

        cat <<EOF | oc apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            creationTimestamp: null
            name: acmeair-booking-db
          spec:
            replicas: 1
            selector:
              matchLabels:
                name: acmeair-booking-db
            strategy: {}
            template:
              metadata:
                creationTimestamp: null
                labels:
                  name: acmeair-booking-db
              spec:
                volumes:
                  - name: acmeair-booking-db-1
                    emptyDir: {}
                  - name: acmeair-booking-db-2
                    emptyDir: {}
                containers:
                - image: $(params.imageLocation)/$(context.taskRun.namespace)/mongo:latest
                  name: acmeair-booking-db
                  ports:
                  - containerPort: 27017
                    protocol: TCP
                  resources: {}
                  volumeMounts:
                    - name: acmeair-booking-db-1
                      mountPath: /data/configdb
                    - name: acmeair-booking-db-2
                      mountPath: /data/db
                restartPolicy: Always
          status: {}

        EOF
        sleep 120
    - image: >-
        intreg0.fpet.pokprv.stglabs.ibm.com:5000/openshift/cli:latest
      name: create-routes
      resources: {}
      script: |
        #!/bin/bash
        cat <<EOF | oc apply -f -
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: acmeair-booking-route
          spec:
            path: /booking
            host: $(params.applicationHost)
            to:
              kind: Service
              name: acmeair-booking-service

        EOF
        sleep 30